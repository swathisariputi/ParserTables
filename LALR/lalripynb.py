# -*- coding: utf-8 -*-
"""lalripynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O_fCtNSYFwzAYQtGi3RdmNTV8jO5vxqR
"""

from copy import deepcopy

class State:
    state_count = -1
    def __init__(self, new_state):
        self.state = deepcopy(new_state)
        self.actions = {}
        self.parent = ()
        State.state_count += 1
        self.state_num = self.state_count

    def update_goto(self, X, N):
        self.actions[X] = N.state_num

    def update_parentName(self,I,X):
        self.parent = (I.state_num, X)


class lalrState(State):
    state_count = 0
    def __init__(self,state):
        super(lalrState, self).__init__(state.state)
        self.parent_list = []
        self.actions = deepcopy(state.actions)
        self.parent = deepcopy(state.parent)
        lalrState.state_count += 1

    def update_parentList(self,I):
        self.parent_list.append(I.state_num)

    def update_mapping(self,mapping):
        if self.parent != ():
            self.parent = (mapping[self.parent[0]],self.parent[1])
        for key, val in self.actions.items():
            self.actions[key] = mapping[val]

#from state import State, lalrState
from copy import deepcopy

def term_and_nonterm(grammar,term,non_term):
    for prod in grammar:
        if prod[0] not in non_term:
            non_term.append(prod[0])
        for char in prod[1]:
            if not char.isupper():
                if char not in term:
                    term.append(char)


def calculate_first(grammar,first,term,non_term):
    for t in term:
        first[t] = t;
    for nt in non_term:
        first[nt] = set({})
    for nt in non_term:
        get_first(nt,grammar,first,term)


def get_first(nt,grammar,first,term):
    for prod in grammar:
        if nt in prod[0]:
            rhs = prod[1]
            first_char = rhs[0]
            if first_char in term:
                first[nt].add(first[first_char])
            else:
                for char in rhs:
                    if not first[char] and nt != char:
                        get_first(char,grammar,first,term)

                i = 0
                while i < len(rhs) and 'e' in first[rhs[i]]:
                    for elem in first[rhs[i]]:
                        if 'e' != elem:
                            first[nt].add(elem)
                    i += 1
                if i == len(rhs):
                    first[nt].add('e')
                else:
                    for elem in first[rhs[i]]:
                        first[nt].add(elem)


def get_augmented(grammar,augment_grammar):
    augment_grammar.append([grammar[0][0]+"'",grammar[0][0]])
    augment_grammar.extend(grammar)

def closure(I,augment_grammar,first,non_term):
    while True:
        new_item_added = False
        for item in I:
            cursor_pos = item[1].index('.')
            if cursor_pos == (len(item[1])-1):
                continue
            next_char = item[1][cursor_pos+1]
            if next_char in non_term:
                for prod in augment_grammar:
                    if next_char == prod[0]:
                        if prod[1] == 'e':
                            rhs = 'e.'
                        else:
                            rhs = '.' + prod[1]
                        la = []                                     #look ahead
                        if cursor_pos < (len(item[1]) - 2):
                            Ba = item[1][cursor_pos+2]
                            for firs in first[Ba]:
                                if 'e' == firs:
                                    for elem in item[2]:
                                        if elem not in la:
                                            la.append(elem)
                                else:
                                    if firs not in la:
                                        la.append(firs)
                        else:
                            la = deepcopy(item[2])

                        new_item = [next_char,rhs,la]               #structure of each item
                        
                        if new_item not in I:
                            same_item_with_diff_la = False
                            for item_ in I:
                                if item_[0] == new_item[0] and item_[1] == new_item[1]:
                                    same_item_with_diff_la = True
                                    for las in la:
                                        if las not in item_[2]:
                                            item_[2].append(las)
                                            new_item_added = True
                            if not same_item_with_diff_la:
                                I.append(new_item)
                                new_item_added = True

        if not new_item_added:
            break


def goto(I,X,augment_grammar,first,non_term):
    J =[]
    for item in I:
        cursor_pos = item[1].index('.')
        if cursor_pos < len(item[1])-1:
            next_char = item[1][cursor_pos+1]
            if next_char == X :
                new_rhs = item[1].replace('.'+X,X+'.')
                new_item = [item[0],new_rhs,item[2]]
                J.append(new_item)
    closure(J,augment_grammar,first,non_term)
    return J



def isSame(states,new_state,I,X):
    for J in states:
        if J.state == new_state:
            I.update_goto(X,J)
            return True
    return False



def init_first(augment_grammar,first,non_term):
    I = [[augment_grammar[0][0],'.'+augment_grammar[0][1],['$']]]
    closure(I,augment_grammar,first,non_term)
    return I


def find_states(states,augment_grammar,first,term,non_term):
    first_state = init_first(augment_grammar,first,non_term)
    I = State(first_state)
    states.append(I)
    all_symb = non_term + term
    while True:
        new_state_added =False
        for I in states:
            for X in all_symb:
                new_state = goto(I.state,X,augment_grammar,first,non_term)              #goto(I,X)
                if (new_state != [] ) and not isSame(states,new_state,I,X):
                    N = State(new_state)
                    I.update_goto(X,N)
                    N.update_parentName(I,X)
                    states.append(N)
                    new_state_added = True

        if not new_state_added:
            break


def combine_states(lalr_states,states):
    first = lalrState(states[0])
    first.update_parentList(states[0])
    lalr_states.append(first)
    mapping = [0]
    for I in states[1:]:
        state_found = False
        for J in lalr_states:
            if J.state[0][:2] == I.state[0][:2] :
                state_found = True
                mapping.append(J.state_num)
                J.update_parentList(I)
                for index, item in enumerate(J.state):
                    for la in I.state[index][2]:
                        if la not in item[2]:
                            item[2].append(la)

        if not state_found:
            new_state = lalrState(I)
            new_state.update_parentList(I)

            lalr_states.append(new_state)
            mapping.append(new_state.state_num)

    for I in lalr_states:
        I.update_mapping(mapping)



def get_parse_table(parse_table,states,augmented_grammar):                      #here states -> lalr_states
    ambiguous = False
    for index, I in enumerate(states):
        parse_table.append(I.actions)
        for item in I.state:
            rhs_list = item[1].split('.')
            if rhs_list[1] == '':
                prod_no = augmented_grammar.index([item[0],rhs_list[0]])
                for la in item[2]:
                    if la in parse_table[index].keys():
#                        print('Ambiguous grammar!!')
                        ambiguous = True
                    else:
                        parse_table[index][la] = -prod_no

    if ambiguous:
        print("Ambiguous Grammar!!\n\nGiving priority to Shift over Reduce")

# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'design.ui'

from qtpy import QtCore, QtGui, QtWidgets

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(852, 671)
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Minimum, QtGui.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.groupBox = QtGui.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(430, 100, 401, 141))
        self.groupBox.setTitle(_fromUtf8(""))
        self.groupBox.setObjectName(_fromUtf8("groupBox"))
        self.label_3 = QtGui.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(10, 20, 371, 21))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_3.sizePolicy().hasHeightForWidth())
        self.label_3.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_3.setFont(font)
        self.label_3.setObjectName(_fromUtf8("label_3"))
        self.lineEdit = QtGui.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(10, 50, 381, 31))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lineEdit.sizePolicy().hasHeightForWidth())
        self.lineEdit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName(_fromUtf8("lineEdit"))
        self.parse = QtGui.QPushButton(self.groupBox)
        self.parse.setGeometry(QtCore.QRect(270, 90, 121, 41))
        self.parse.setObjectName(_fromUtf8("parse"))
        self.groupBox_2 = QtGui.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 270, 811, 51))
        self.groupBox_2.setTitle(_fromUtf8(""))
        self.groupBox_2.setObjectName(_fromUtf8("groupBox_2"))
        self.display = QtGui.QPushButton(self.groupBox_2)
        self.display.setGeometry(QtCore.QRect(10, 10, 111, 31))
        self.display.setObjectName(_fromUtf8("display"))
        self.first = QtGui.QPushButton(self.groupBox_2)
        self.first.setGeometry(QtCore.QRect(170, 10, 111, 31))
        self.first.setObjectName(_fromUtf8("first"))
        self.lr1 = QtGui.QPushButton(self.groupBox_2)
        self.lr1.setGeometry(QtCore.QRect(340, 10, 111, 31))
        self.lr1.setObjectName(_fromUtf8("lr1"))
        self.lalr = QtGui.QPushButton(self.groupBox_2)
        self.lalr.setGeometry(QtCore.QRect(510, 10, 111, 31))
        self.lalr.setObjectName(_fromUtf8("lalr"))
        self.parse_table = QtGui.QPushButton(self.groupBox_2)
        self.parse_table.setGeometry(QtCore.QRect(680, 10, 111, 31))
        self.parse_table.setObjectName(_fromUtf8("parse_table"))
        self.textBrowser = QtGui.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(20, 330, 811, 301))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.textBrowser.setFont(font)
        self.textBrowser.setFrameShape(QtGui.QFrame.StyledPanel)
        self.textBrowser.setFrameShadow(QtGui.QFrame.Sunken)
        self.textBrowser.setLineWrapMode(QtGui.QTextEdit.NoWrap)
        self.textBrowser.setObjectName(_fromUtf8("textBrowser"))
        self.plainTextEdit = QtGui.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(23, 80, 381, 181))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.plainTextEdit.setFont(font)
        self.plainTextEdit.setObjectName(_fromUtf8("plainTextEdit"))
        self.label_2 = QtGui.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(20, 50, 151, 21))
        sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Preferred, QtGui.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_2.sizePolicy().hasHeightForWidth())
        self.label_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_2.setFont(font)
        self.label_2.setObjectName(_fromUtf8("label_2"))
        self.label = QtGui.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(280, 10, 261, 41))
        font = QtGui.QFont()
        font.setFamily(_fromUtf8("Gungsuh"))
        font.setPointSize(26)
        font.setBold(True)
        font.setUnderline(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName(_fromUtf8("label"))
        self.groupBox_3 = QtGui.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(730, 60, 101, 31))
        self.groupBox_3.setTitle(_fromUtf8(""))
        self.groupBox_3.setObjectName(_fromUtf8("groupBox_3"))
        self.label_4 = QtGui.QLabel(self.groupBox_3)
        self.label_4.setGeometry(QtCore.QRect(10, 0, 91, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_4.setFont(font)
        self.label_4.setObjectName(_fromUtf8("label_4"))
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 846, 21))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menu_File = QtGui.QMenu(self.menubar)
        self.menu_File.setObjectName(_fromUtf8("menu_File"))
        self.menu_About = QtGui.QMenu(self.menubar)
        self.menu_About.setObjectName(_fromUtf8("menu_About"))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)
        self.action_Open = QtGui.QAction(MainWindow)
        self.action_Open.setObjectName(_fromUtf8("action_Open"))
        self.action_Exit = QtGui.QAction(MainWindow)
        self.action_Exit.setObjectName(_fromUtf8("action_Exit"))
        self.actionAuthor = QtGui.QAction(MainWindow)
        self.actionAuthor.setObjectName(_fromUtf8("actionAuthor"))
        self.menu_File.addAction(self.action_Open)
        self.menu_File.addSeparator()
        self.menu_File.addAction(self.action_Exit)
        self.menu_About.addAction(self.actionAuthor)
        self.menubar.addAction(self.menu_File.menuAction())
        self.menubar.addAction(self.menu_About.menuAction())
        self.label_3.setBuddy(self.lineEdit)
        self.label_2.setBuddy(self.plainTextEdit)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.setTabOrder(self.plainTextEdit, self.lineEdit)
        MainWindow.setTabOrder(self.lineEdit, self.parse)
        MainWindow.setTabOrder(self.parse, self.display)
        MainWindow.setTabOrder(self.display, self.first)
        MainWindow.setTabOrder(self.first, self.lr1)
        MainWindow.setTabOrder(self.lr1, self.lalr)
        MainWindow.setTabOrder(self.lalr, self.parse_table)
        MainWindow.setTabOrder(self.parse_table, self.textBrowser)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow", None))
        self.label_3.setText(_translate("MainWindow", "Enter expression to evaluate :", None))
        self.parse.setText(_translate("MainWindow", "Parse", None))
        self.display.setText(_translate("MainWindow", "Display", None))
        self.first.setText(_translate("MainWindow", "First", None))
        self.lr1.setText(_translate("MainWindow", "LR(1) items", None))
        self.lalr.setText(_translate("MainWindow", "LALR items", None))
        self.parse_table.setText(_translate("MainWindow", "Parsing Table", None))
        self.label_2.setText(_translate("MainWindow", "Enter grammar :", None))
        self.label.setText(_translate("MainWindow", "LALR Parser", None))
        self.label_4.setText(_translate("MainWindow", "\'e\' : epsilon", None))
        self.menu_File.setTitle(_translate("MainWindow", "&File", None))
        self.menu_About.setTitle(_translate("MainWindow", "&About", None))
        self.action_Open.setText(_translate("MainWindow", "&Open", None))
        self.action_Open.setShortcut(_translate("MainWindow", "Ctrl+O", None))
        self.action_Exit.setText(_translate("MainWindow", "&Exit", None))
        self.action_Exit.setShortcut(_translate("MainWindow", "Ctrl+Q", None))
        self.actionAuthor.setText(_translate("MainWindow", "Author", None))

import sys
#from PyQt4 import QtCore, QtGui
#from design import Ui_MainWindow

#from impl import calculate_first, term_and_nonterm, get_augmented , find_states, combine_states, get_parse_table
#from  state import State, lalrState

class parser(QtWidgets.QMainWindow):
    def __init__(self, parent = None):
        QtGui.QWidget.__init__(self,parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.setFixedSize(852, 671)
        self.setWindowTitle("LALR Parser")

        self.init()

        QtCore.QObject.connect(self.ui.action_Open,QtCore.SIGNAL("triggered()"),self.open_file)
        self.ui.action_Exit.triggered.connect(self.exit_app)
        self.ui.display.clicked.connect(self.disp)
        self.ui.first.clicked.connect(self.disp_first)
        self.ui.lr1.clicked.connect(self.disp_lr1_states)
        self.ui.lalr.clicked.connect(self.disp_lalr_states)
        self.ui.parse_table.clicked.connect(self.disp_parse_table)
        self.ui.plainTextEdit.textChanged.connect(self.check_changed)
        self.ui.parse.clicked.connect(self.disp_parsing)
        self.ui.actionAuthor.triggered.connect(self.disp_author)


    def init(self):
        self.grammar = []
        self.augment_grammar = []
        self.first = {}
        self.term = []
        self.non_term = []
        self.states = []
        self.lalr_states = []
        self.parse_table = []
        State.state_count = -1
        lalrState.state_count = 0

    def check_changed(self):
        self.changed = True


    def open_file(self):
        file = QtGui.QFileDialog.getOpenFileName(self,'Open Grammar file')
        if file != '':
            file = open(file,'r')
            self.ui.plainTextEdit.setPlainText(file.read())
            file.close()
            self.ui.lineEdit.clear()
            self.ui.textBrowser.clear()


    def read_input(self):
        self.init()
        lines = self.ui.plainTextEdit.toPlainText()         #string
        lines_list = lines.split('\n')                      #converting into list of lines

        try:
            for line in lines_list:
                line = line.replace(' ' ,'')
        
                if line != '':
                    line_list = line.split('->')
        
                    if line_list[0].isupper() and line_list[1] != '':
                        if '|' in line_list[1]:
                            prod_list = line_list[1].split('|')
                            for prod in prod_list:
                                self.grammar.append([line_list[0],prod])
                        else:
                            self.grammar.append(line_list)
                    else:
                        self.ui.textBrowser.clear()
                        self.ui.textBrowser.setText("Invalid grammar")
                        self.grammar = []
    
            if self.grammar != []:
                term_and_nonterm(self.grammar,self.term,self.non_term)
                calculate_first(self.grammar,self.first,self.term,self.non_term)
                get_augmented(self.grammar,self.augment_grammar)
                find_states(self.states,self.augment_grammar,self.first,self.term,self.non_term)
                combine_states(self.lalr_states, self.states)
                get_parse_table(self.parse_table,self.lalr_states,self.augment_grammar)
                self.changed = False

        except (KeyError, IndexError):
            self.ui.textBrowser.clear()
            self.ui.textBrowser.setText("Invalid grammar")
            self.init()
            


############################         DISPLAY          ################################

    def disp(self):
        self.ui.textBrowser.clear()
        if self.grammar == [] or self.changed:
            self.read_input()

        if self.grammar != []:
            for prod in self.grammar:
                s =  prod[0]+ ' -> ' + prod[1]+'\n'
                self.ui.textBrowser.append(s)
            self.ui.textBrowser.append("\nNon Terminals : "+' '.join(self.non_term)+"\nTerminals : "+' '.join(self.term))
        

    def disp_first(self):
        if self.first == {} or self.changed:
            self.read_input()
        if self.first != {}:
            self.ui.textBrowser.clear()
            for nonterm in self.non_term:
                self.ui.textBrowser.append('First('+nonterm+') : '+' '.join(self.first[nonterm])+'\n')


    def disp_lr1_states(self):
        if self.states == [] or self.changed:
            self.read_input()
        if self.states != []:
            self.ui.textBrowser.clear()
            self.ui.textBrowser.append("Number of LR(1) states : "+ str(self.states[len(self.states)-1].state_num + 1))
            for state in self.states:
                self.ui.textBrowser.append('----------------------------------------------------------------')
                if state.state_num == 0:
                    self.ui.textBrowser.append("\nI"+str(state.state_num)+' : '+'\n')
                else:
                    self.ui.textBrowser.append("\nI"+str(state.state_num)+' : '+' goto ( I'+str(state.parent[0])+" -> '"+ str(state.parent[1]) +"' )\n")
                for item in state.state:
                    self.ui.textBrowser.append(item[0]+ ' -> ' + item[1]+' ,  [ '+ ' '.join(item[2])+' ]')
                if state.actions != {}:
                    self.ui.textBrowser.append('\nActions : ')
                    for k,v in state.actions.items():
                        self.ui.textBrowser.insertPlainText(str(k)+' -> '+str(abs(v))+'\t')



    def disp_lalr_states(self):
        if self.lalr_states == [] or self.changed:
            self.read_input()
        if self.lalr_states != []:
            self.ui.textBrowser.clear()
            self.ui.textBrowser.append("Number of LALR states : " + str(lalrState.state_count))
            for state in self.lalr_states:
                self.ui.textBrowser.append('----------------------------------------------------------------')
                if state.state_num == 0:
                    self.ui.textBrowser.append("\nI"+str(state.state_num)+' : '+'\tGot by -> '+str(state.parent_list)+'\n')
                else:
                    self.ui.textBrowser.append("\nI"+str(state.state_num)+' : '+' goto ( I'+str(state.parent[0])+" -> '"+ str(state.parent[1]) +"' )"+'\tGot by -> '+str(state.parent_list)+'\n')
                for item in state.state:
                    self.ui.textBrowser.append(item[0]+ ' -> ' + item[1]+' ,   [ '+ ' '.join(item[2])+' ]')
                if state.actions != {}:
                    self.ui.textBrowser.append('\nActions : ')
                    for k,v in state.actions.items():
                        self.ui.textBrowser.insertPlainText(str(k)+' -> '+str(abs(v))+'\t')



    def disp_parse_table(self):
        if self.grammar == [] or self.changed:
            self.read_input()

        if self.grammar != []:
            self.ui.textBrowser.clear()
            all_symb = []
            all_symb.extend(self.term)
            all_symb.append('$')
            all_symb.extend(self.non_term)
            if 'e' in all_symb:
                all_symb.remove('e')

            head = '{0:12}'.format(' ')
            for X in all_symb:
                head = head + '{0:12}'.format(X)
            self.ui.textBrowser.setText(head+'\n')
            s = '------------'*len(all_symb)
            self.ui.textBrowser.append(s)

            for index, state in enumerate(self.parse_table):
                line = '{0:<12}'.format(index)
                for X in all_symb:
                    if X in state.keys():
                        if X in self.non_term:
                            action = state[X]
                        else:
                            if state[X] > 0:
                                action = 's' + str(state[X])
                            elif state[X] < 0:
                                action = 'r' + str(abs(state[X]))
                            elif state[X] == 0:
                                action = 'accept'
                        
                        line = line + '{0:<12}'.format(action)
                    else:
                        line = line + '{0:<12}'.format("")
    
                self.ui.textBrowser.append(line)
                self.ui.textBrowser.append(s)


    def disp_parsing(self):
        if self.grammar == [] or self.changed:
            self.read_input()
        if self.grammar != []:
            self.ui.textBrowser.clear()
            line_input = self.ui.lineEdit.text()
            self.parse(self.parse_table, self.augment_grammar, line_input)



    def parse(self,parse_table,augment_grammar,inpt):
        inpt = list(inpt+'$')
        stack = [0]
        a = inpt[0]
        try:
            head = '{0:40} {1:40} {2:40}'.format("Stack","Input", "Actions")
            self.ui.textBrowser.setText(head)
            while True:
                string = '\n{0:<40} {1:<40} '.format(stack, ''.join(inpt))
                s = stack[len(stack)-1]
                action = parse_table[s][a]
                if action > 0:
                    inpt.pop(0)
                    stack.append(action)
                    self.ui.textBrowser.append(string + 'Shift ' + a+ '\n')
                    a = inpt[0]
                elif action < 0:
                    prod = augment_grammar[-action]
                    if prod[1] != 'e':
                        for i in prod[1]:
                            stack.pop()
                    t = stack[len(stack)-1]
                    stack.append(parse_table[t][prod[0]])
                    self.ui.textBrowser.append(string + 'Reduce ' + prod[0] + ' -> '+ prod[1] + '\n')
                elif action == 0:
                    self.ui.textBrowser.append('ACCEPT\n')
                    break
        except KeyError:
            self.ui.textBrowser.append('\n\nERROR\n')


    def exit_app(self):
        QtGui.QApplication.quit()
        
    def disp_author(self):
        QtGui.QMessageBox.information(self, "About", "LALR PARSER\n\nAuthor:\n  Akshay Hebbar Y S\t", QtGui.QMessageBox.Ok)



if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    myapp = parser()
    myapp.show()
    sys.exit(app.exec())